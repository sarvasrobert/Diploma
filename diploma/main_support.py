#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Nov 27, 2017 01:27:34 PM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

from tkinter import dnd
import sys
import time
import os
import scipy
import main_support
import numpy as np
import cv2
import PIL
import imutils
import importlib
import main
from PIL import Image,ImageTk,ImageFilter,ImageOps,ImageDraw
from matplotlib import pyplot as plt
from classifier import * 
from optflow import *




class MainGUI:
    def __init__(self, top=None):
        '''This class configures and populates the main GUI window.
           top is the toplevel containing window.'''


        ''' FLAGS AND GLOBAL PARAMETERS'''
        self.RED = [0,0,255]         # rectangle color
        self.BLACK = [0,0,0]         # sure BG
        self.WHITE = [255,255,255]   # sure FG

        self.DRAW_BG = False         # turn on BG selction of pixels
        self.DRAW_FG = False         # turn on FG selction of pixels

        # setting up flags
        self.rect = (0,0,1,1)
        self.drawing = False         # flag for drawing curves
        self.rectangle = False       # flag for drawing rect
        self.rect_over = False       # flag to check if rect drawn
        self.thickness = 3           # brush thickness       
        
        self.value = 10              # drawing initialized to FG
        self.rect_or_mask = 0        # flag for selecting rect or mask mode for Grabcut extraction
        self.pRect = True
        

        self.setupdesign(top=top)           # setup all buttons and design in function from main_support


    def vypis(self, text):
        self.quote = "\n" + str(text)
        self.textwindow.insert(END, self.quote)
        self.textwindow.config(yscrollcommand=self.quote)
        self.textwindow.update()
        self.textwindow.yview_moveto(1)
              
    
    def video_loop(self):
        """ Get frame from the video stream and show it in Tkinter """
        self.scale.set(self.index)
        #self.vypis("som na frame" + str(self.index))
        if self.sliderdrag:
            ''' if moving slider '''
            self.index = int(self.scale.get())
            self.vs.set(cv2.CAP_PROP_POS_FRAMES, self.index)
            ok,frame =self.vs.read()
            frame = imutils.resize(frame, width=self.framewidth,height=self.frameheight)
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image
            return
        ok, frame = self.vs.read()  # read frame from video stream
        if self.stepback:
            ''' one step backward '''
            self.index = self.index - 1 
            self.vs.set(cv2.CAP_PROP_POS_FRAMES, self.index)
            ok,frame =self.vs.read()
            frame = imutils.resize(frame, width=self.framewidth,height=self.frameheight)
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image
            return
        if ok and self.step:
            ''' one step forward '''
            frame = imutils.resize(frame, width=self.framewidth,height=self.frameheight)
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.index +=1
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image
            return            
        if ok and self.stopped:  # frame captured without any errors
            ''' play video loop '''
            frame = imutils.resize(frame, width=self.framewidth,height=self.frameheight)
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.index +=1
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image
        else:
            return
        self.panel.after(int( self.fps), self.video_loop)  # call the same function after 30 milliseconds
           
    def start(self):
        self.stopped = True
        self.step = False
        self.stepback = False
        self.Button3.configure(state="disabled")
        self.Button4.configure(state="normal")
        self.Button9.configure(state="normal")
        self.Button10.configure(state="normal") 
        self.Button15.configure(state="normal")
        self.Button16.configure(state="normal") 
        self.pRect = True 
        self.value = 100
        self.rectangle = 0
        self.rect_or_mask = 0 
        self.mask = np.zeros(self.currimage.shape[:2],dtype = np.uint8)             
        self.video_loop()

    def stepforward(self):
        self.step = True
        self.stepback = False
        self.Button3.configure(state="normal")
        self.Button4.configure(state="disabled")
        self.pRect = True
        self.value = 100
        self.rectangle = 0
        self.rect_or_mask = 0
        self.mask = np.zeros(self.currimage.shape[:2],dtype = np.uint8)
        self.video_loop()

    def stepbackward(self):
        self.stepback = True
        self.step = False
        self.Button3.configure(state="normal")
        self.Button4.configure(state="disabled")
        self.pRect = True
        self.value = 100
        self.rectangle = 0;
        self.rect_or_mask = 0
        self.mask = np.zeros(self.currimage.shape[:2],dtype = np.uint8)
        self.video_loop()

    def loadosvos(self):
        import glob
        self.loadosvosfiles = True
        self.loadvideo = False
        self.framearray = []
        self.framearray1 = []
        self.pRect = False
        self.Button13.configure(state='normal')
        self.Button14.configure(state='normal')  
        self.Button5.configure(state='normal')
        self.Button6.configure(state='normal')      
        self.osvosfile = filedialog.askdirectory()
        self.vypis('loading osvos files ... ' ) 
        self.classifiers = []
        for frame in os.listdir(self.osvosfile):
            if (frame == "bw_mask"):
                break
            img = Image.open(str(self.osvosfile) + '/' + str(frame) )
            imgtk = ImageTk.PhotoImage(image=img)  # convert image for tkinter
            self.framearray.append(imgtk) 
            self.framearray1.append(img)   
        imgtk = self.framearray[0]
        #self.imageis = cv2.cvtColor(np.array(imgtk), cv2.COLOR_RGB2BGR)
        self.frameheight, self.framewidth = imgtk.height(),imgtk.width() 
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
        self.panel2.config(image=imgtk)        
        self.osvosimageindex = 0
        self.Button12.configure(state="normal")
        self.vypis('osvos files loaded!')

    def export(self):
        file = os.path.basename(os.path.normpath(str(self.osvosfile)))
        file = self.osvosfile.split('/')
        name = file[(len(file)-2)]
        #print(name)
        #print('w,h je', self.framearray[1].width(), self.framearray[1].height() )
        #fourcc = cv2.VideoWriter_fourcc(*'X264')
        #fourcc = cv2.VideoWriter_fourcc(*'MJPG')
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        #fourcc = cv2.VideoWriter_fourcc(*'MP4V')
        out = cv2.VideoWriter(str(name)+'OUT.avi', fourcc, int(self.videoFPS.get()), (int(self.framearray[1].width()), int(self.framearray[1].height()) ))
        #for i in range(0,len(self.framearray)):
        for frame in os.listdir(self.osvosfile):
            if frame == "bw_mask":
                break
            img = cv2.imread(str(self.osvosfile) + '/' + str(frame))    
            #print(img.size)
            out.write(img)
            #cv2.imshow('video frames',img)
        out.release()
        self.vypis('video was saved to:'+str(name))

    def stepforwardright(self):
        self.osvosimageindex +=1
        imgtk = self.framearray[self.osvosimageindex]
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
        self.panel2.config(image=imgtk) 

    def stepbackwardright(self):
        self.osvosimageindex -=1
        imgtk = self.framearray[self.osvosimageindex]
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
        self.panel2.config(image=imgtk) 

    def zoomin(self):
        if self.zoomvalue < 1.9:
            self.zoomvalue +=0.1
            self.vs.set(cv2.CAP_PROP_POS_FRAMES, self.index-1)
            ok,frame =self.vs.read()
            frame = imutils.resize(frame, width=int(self.framewidth*self.zoomvalue),height=int(self.frameheight*self.zoomvalue))
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image

        
    def zoomout(self):
        if self.zoomvalue > 1.0:
            self.zoomvalue -=0.1
            self.vs.set(cv2.CAP_PROP_POS_FRAMES, self.index-1)
            ok,frame =self.vs.read()
            frame = imutils.resize(frame, width=int(self.framewidth*self.zoomvalue),height=int(self.frameheight*self.zoomvalue))
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image


    def saveto(self):
        vidcap = cv2.VideoCapture(self.file)
        count = 0 
        newFolder, videotype = self.filename.split('.')
        self.root_folder = os.path.dirname(os.path.realpath(__file__))
        sys.path.append(os.path.abspath(self.root_folder))
        self.real_path = str(self.root_folder) + '/osvos/DAVIS/JPEGImages/480p/'+str(newFolder)+'/'
        if os.path.isdir(self.real_path):
        #if os.path.getsize(self.real_path) > 0:
            self.vypis('path' + self.real_path + 'exist!')
            return
        os.makedirs( self.real_path )
        self.osvos_imgs = newFolder
        while vidcap.isOpened():
            success, image = vidcap.read()
            if success:
                image = imutils.resize(image, width=int(self.framewidth),height=int(self.frameheight))
                if count < 10:  
                    cv2.imwrite(os.path.join(self.real_path, '000' + '%d.jpg') % count, image)
                elif ( (count >= 10 ) & ( count < 100) ):
                    cv2.imwrite(os.path.join(self.real_path, '00'  + '%d.jpg') % count, image)
                elif ( (count >= 100 ) & ( count < 1000) ):
                    cv2.imwrite(os.path.join(self.real_path, '0'   + '%d.jpg') % count, image)   
                else:
                    self.vypis("video is too long")
                    return                                          
                self.vypis(str(count)+ ", " +str(os.path.join(self.real_path) + str(count) + '.jpg') )
                count +=1
                
            else:
                break
        vidcap.release()
        cv2.destroyAllWindows()  
            
        
    def on_button_press(self, event):
        if self.loadvideo == True:
            if self.zoomvalue != 1.0:
                posunx = int(abs((self.framewidth * self.zoomvalue)-self.framewidth))
                posuny = int(abs((self.frameheight * self.zoomvalue)-self.frameheight))
                self.x = int(event.x+(posunx/2))
                self.y = int(event.y+(posuny/2))
            else:
                self.x = event.x
                self.y = event.y
            self.imag =self.current_image
        if self.loadosvosfiles == True:            
            if self.zoomvalue != 1.0:
                posunx = int(abs((self.framewidth * self.zoomvalue)-self.framewidth))
                posuny = int(abs((self.frameheight * self.zoomvalue)-self.frameheight))
                self.x = int(event.x+(posunx/2))
                self.y = int(event.y+(posuny/2))
            else:
                self.x = event.x
                self.y = event.y 
            self.imag =self.framearray1[self.osvosimageindex]


    def on_button_move(self, event):
        x0,y0 = (self.x, self.y) 
        if self.zoomvalue != 1.0:
            posunx = int(abs((self.framewidth  * self.zoomvalue ) -self.framewidth ))
            posuny = int(abs((self.frameheight * self.zoomvalue ) -self.frameheight))
            x1 = int(event.x+(posunx/2))
            y1 = int(event.y+(posuny/2))
        else:
            x1,y1 = (event.x,event.y)
        ##print(self.framewidth, self.frameheight)
        y0 = int(y0-((500 - self.frameheight)/2)) 
        y1 = int(y1-((500 - self.frameheight)/2)) 
        if self.pRect == True:
            rect = ImageDraw.Draw(self.current_image)
            rect.rectangle([x0,y0,x1,y1], fill=None, outline='red')  
            ##cv2.rectangle(self.currimage, (x0,y0), (x1,y1),[255,0,0], 4)
        elif self.value == 2:
            ##cv2.circle(self.current_image,(x1,y1),5,'red',-1)
            cv2.circle(self.mask,(x1,y1),5,0,-1)
            circ = ImageDraw.Draw(self.current_image)
            circ.ellipse([x1-5, y1-5, x1+5, y1+5], fill='red')
            #circ.rectangle([x1-5, y1-5, x1+5, y1+5], fill='red')           
        elif self.value == 0:
            ##cv2.circle(self.current_image,(x1,y1),5,'blue',-1)
            cv2.circle(self.mask,(x1,y1),5,1,-1)
            circ = ImageDraw.Draw(self.current_image)
            circ.ellipse([x1-5, y1-5, x1+5, y1+5], fill='yellow')
            #circ.rectangle([x1-5, y1-5, x1+5, y1+5], fill='yellow')
        imgtk = ImageTk.PhotoImage(image=self.current_image)
        self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
        self.panel.config(image=imgtk)
        if self.pRect == True:
            self.current_image = self.imag.copy()  

    def on_button_move1(self, event):
        x0,y0 = (self.x, self.y) 
        #print(self.framewidth, self.frameheight)
        if self.zoomvalue != 1.0:
            posunx = int(abs((self.framewidth  * self.zoomvalue ) -self.framewidth ))
            posuny = int(abs((self.frameheight * self.zoomvalue ) -self.frameheight))
            x1 = int(event.x+(posunx/2))
            y1 = int(event.y+(posuny/2))
        else:
            x1,y1 = (event.x,event.y)
        y0 = int(y0-((500 - self.frameheight)/2)) 
        y1 = int(y1-((500 - self.frameheight)/2)) 
            ##cv2.rectangle(self.currimage, (x0,y0), (x1,y1),[255,0,0], 4)
        if self.value == 2:
            ##cv2.circle(self.current_image,(x1,y1),5,'red',-1)
            cv2.circle(self.mask,(x1,y1),5,0,-1)
            circ = ImageDraw.Draw(Image(fromarray(self.framearray1[self.osvosimageindex])))
            circ.ellipse([x1-5, y1-5, x1+5, y1+5], fill='red')
            #circ.rectangle([x1-5, y1-5, x1+5, y1+5], fill='red')           
        if self.value == 0:
            ##cv2.circle(self.current_image,(x1,y1),5,'blue',-1)
            cv2.circle(self.mask,(x1,y1),5,1,-1)
            circ = ImageDraw.Draw(Image(fromarray(self.framearray1[self.osvosimageindex])))
            circ.ellipse([x1-5, y1-5, x1+5, y1+5], fill='yellow')
            #circ.rectangle([x1-5, y1-5, x1+5, y1+5], fill='yellow')
        imgtk = ImageTk.PhotoImage(image=self.framearray1[self.osvosimageindex])
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
        self.panel2.config(image=imgtk)                   
           

    def on_button_release(self, event):
        if self.value != 0 and self.value !=2:
            x0,y0 = (self.x, self.y) 
            if self.zoomvalue != 1.0:
                posunx = int(abs((self.framewidth  * self.zoomvalue ) -self.framewidth ))
                posuny = int(abs((self.frameheight * self.zoomvalue ) -self.frameheight))
                x1 = int(event.x+(posunx/2))
                y1 = int(event.y+(posuny/2))
            else:
                x1,y1 = (event.x,event.y)
            
            y0 = int(y0 -((500 - self.frameheight)/2)) 
            y1 = int(y1-((500 - self.frameheight)/2)) 

            rect = ImageDraw.Draw(self.current_image)
            ##print('rectangle je ',x0,y0,x1,y1)
            rect.rectangle([x0,y0,x1,y1], fill=None, outline='red')
            imgtk = ImageTk.PhotoImage(image=self.current_image)
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel.config(image=imgtk)
            self.rectangle = (min(x0,x1), min(y0,y1), abs(x1-x0), abs(y1-y0))
            self.vypis("rectangle is" +  str(self.rectangle))
            self.cropimage = self.currimage[min(y0,y1):max(y0,y1), min(x0,x1): max(x0,x1)]
            ##cv2.imshow('orezany je ',self.cropimage)
        else:
            x0,y0 = (self.x, self.y)
            y0 = int(y0 -((500 - self.frameheight)/2)) 
            y1 = int(y1-((500 - self.frameheight)/2)) 

            rect = ImageDraw.Draw(self.current_image)
            ##print('rectangle je ',x0,y0,x1,y1)
            rect.rectangle([x0,y0,x1,y1], fill=None, outline='red')
            imgtk = ImageTk.PhotoImage(image=self.current_image)
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel.config(image=imgtk)
            self.rectangle = (min(x0,x1), min(y0,y1), abs(x1-x0), abs(y1-y0))
            self.vypis("rectangle is" +  str(self.rectangle))
            self.cropimage = self.currimage[min(y0,y1):max(y0,y1), min(x0,x1): max(x0,x1)]

    def on_button_release1(self, event):
            x0,y0 = (self.x, self.y) 
            if self.zoomvalue != 1.0:
                posunx = int(abs((self.framewidth  * self.zoomvalue ) -self.framewidth ))
                posuny = int(abs((self.frameheight * self.zoomvalue ) -self.frameheight))
                x1 = int(event.x+(posunx/2))
                y1 = int(event.y+(posuny/2))
            else:
                x1,y1 = (event.x,event.y)            
            y0 = int(y0 -((500 - self.frameheight)/2)) 
            y1 = int(y1-((500 - self.frameheight)/2)) 
            
            #self.curimage = Image.fromarray(self.framearray[self.osvosimageindex])
            rect = ImageDraw.Draw(self.framearray1[self.osvosimageindex])
            ##print('rectangle je ',x0,y0,x1,y1)
            rect.rectangle([x0,y0,x1,y1], fill=None, outline='red')
            imgtk = ImageTk.PhotoImage(image=self.framearray1[self.osvosimageindex])
            self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel2.config(image=imgtk)
            #self.rectangle = (min(x0,x1), min(y0,y1), abs(x1-x0), abs(y1-y0))
            #self.vypis("rectangle is" +  str(self.rectangle))
            #self.cropimage = self.currimage[min(y0,y1):max(y0,y1), min(x0,x1): max(x0,x1)]
            ##cv2.imshow('orezany je ',self.cropimage)

    def fground(self):
        self.value = 0
        self.pRect = False
        self.vypis(" Foreground Brush set" )

    def bground(self):
        self.value = 2
        self.pRect = False;
        self.vypis(" Background Brush set" )


    def start_osvos(self):
        
        self.saveto()
        sys.path.append(str(self.root_folder)+'/osvos')
        import osvos_demo
        if (type(self.os_iter.get()) != int):
            self.vypis('wrong type of input')
            return            
        if (int(self.os_iter.get()) >= 100) & (int(self.os_iter.get()) <= 5000):
            self.osvositerations = int(self.os_iter.get())
        else:
            self.vypis('wrong input. (must be between 100 and 5000)')
            return
        cesta = str(os.path.join( str(self.root_folder),'osvos','DAVIS','ANNOTATIONS','480p', str(self.newFolder)))
        masky = []
        for frame in os.listdir(cesta):
            fr,me = frame.split('.')
            masky.append(fr)    

        #newFolder = str(5)
        #self.maskedindex = "0034"
        #print("name of video file is ", self.file)
        newFolder, videotype = self.filename.split('.')
        #print("mask is ", str(self.maskedindex) + '.png')
        #print("maskovany obrazok je ", newFolder)
        osvos_demo.osvos(newFolder, masky, self.osvositerations)


    def find_rgb(imagename, r_query, g_query, b_query):
        img = Image.open(imagename)
        rgb = img.convert('RGB')
        for x in range(img.size[0]):
           for y in range(img.size[1]):
               r, g, b, = rgb.getpixel((x, y))
               if r == r_query and g == g_query and b == b_query:
                   return (x,y)

    def changeimage(self):
        print('osvosfiles is ',self.osvosframes)
        if self.osvosframes == 1:
            self.osvosframes = 2
        elif self.osvosframes == 2:
            self.osvosframes = 3
        elif self.osvosframes == 3:
            self.osvosframes =1
        if (len(str(self.osvosimageindex)) == 1):
            self.osindex = "000"+ str(self.osvosimageindex)
        elif (len(str(self.osvosimageindex)) ==2):
            self.osindex = "00"+ str(self.osvosimageindex)
        elif (len(str(self.osvosimageindex)) ==3):
            self.osindex = "0"+ str(self.osvosimageindex)
        elif (len(str(self.osvosimageindex)) ==4):
            self.osindex =  str(self.osvosimageindex)
        else:
            self.vypis("video is too long")
            return        
        if self.osvosframes == 1:
            print(str(self.osvosfile)+'/'+str(self.osindex)+'.jpg')
            image = Image.open(str(self.osvosfile)+'/'+str(self.osindex)+'.jpg')
            imgtk = ImageTk.PhotoImage(image=image)
            self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel2.config(image=imgtk)
        elif self.osvosframes ==2:
            cesta = str(self.osvosfile)+'/bw_mask/'
            print(str(cesta)+str(self.osindex)+'.png')
            mask = Image.open(str(cesta)+str(self.osindex)+'.png')
            imgtk = ImageTk.PhotoImage(image=mask)
            self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel2.config(image=imgtk)
        elif self.osvosframes ==3:
            cesta = str(self.osvosfile)+'/bw_mask/'
            print(str(cesta)+str(self.osindex)+'.png')
            mask = Image.open(str(cesta)+str(self.osindex)+'.png')
            img = np.asarray(mask)

            kernel = np.ones((int(self.kernel.get()), int(self.kernel.get())), np.uint8)
            sure_fg = cv2.erode(img, kernel, iterations=int(self.erodenum.get()))
            sure_bg = cv2.dilate(img, kernel, iterations=int(self.dilatenum.get()))
            unknown = cv2.subtract(sure_bg, sure_fg)
            ret, thresh = cv2.threshold(unknown, 240, 255, cv2.THRESH_BINARY)
            unknown[thresh == 255] = 128 
            finaltrimap = sure_fg + unknown
            image = Image.fromarray(finaltrimap)
            imgtk = ImageTk.PhotoImage(image=image)
            self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
            self.panel2.config(image=imgtk)


    def translate(self, event):
        self.firstx = event.x
        self.firsty = event.y
  

    def move_pic(self, event):
        if event.x != self.firstx | event.y != self.firsty:
            self.newx = event.x
            self.newy =  event.y

    def draw_moved_pic(self, event):
        image = self.currimage
        #print('firstx,firsty, newx, newy su:', self.firstx, self.firsty, self.newx, self.newy)
        size1 = abs(self.firstx - self.newx)
        size2 = abs(self.firsty - self.newy)
        if self.firstx > self.newx:
            if self.firsty > self.newy:
                M = np.float32([[1,0,-size2],[0,1,-size1]])
            else:
                M = np.float32([[1,0,-size2],[0,1,size1]])
        else:
            if self.firsty < self.newy:
                M = np.float32([[1,0,size2],[0,1,size1]])
            else:
                M = np.float32([[1,0,size2],[0,1,-size1]])

        dst = cv2.warpAffine(image,M,(self.framewidth,self.frameheight))
        dst1 = cv2.cvtColor(dst, cv2.COLOR_BGR2RGBA) 
        img = Image.fromarray(dst1)
        imgtk = ImageTk.PhotoImage(image=img)
        self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector
        self.panel.config(image=imgtk)           


    def knn_matting(self): 
        #self.classifiers = []
        #self.contour()
        cesta =str(self.osvosfile) + '/bw_mask/'
        directory = os.path.basename(os.path.normpath(self.osvosfile))
        sys.path.append(cesta)
        if len(str(self.osvosimageindex)) == 1:
            self.maskname = '000'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 2:
            self.maskname = '00'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 3:
            self.maskname = '0'+str(self.osvosimageindex)
        else:
            self.maskname = str(self.osvosimageindex)
        #self.vypis(str(cesta)+self.maskname+'.png')
        #self.vypis(str(cesta)+str(self.maskname)+'.png')
        ob = cv2.imread(str(self.root_folder)+'/osvos/DAVIS/JPEGImages/480p/'+str(directory)+'/'+str(self.maskname)+'.jpg',cv2.IMREAD_UNCHANGED)[:,:,:3]
        obr = Image.open(str(self.root_folder)+'/osvos/DAVIS/JPEGImages/480p/'+str(directory)+'/'+str(self.maskname)+'.jpg' )
        #hardmask = cv2.imread(str(self.root_folder)+'/osvos/DAVIS/Results/Segmentations/480p/OSVOS/'+str(directory)+'/'+str(self.maskname)+'.jpg',cv2.IMREAD_UNCHANGED)[:,:,:3]
        img = cv2.imread( str(cesta)+str(self.maskname)+'.png',cv2.IMREAD_UNCHANGED)
        if (len(img.shape)) == 3:
            img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY);
        ob1 = ob
        #tri = cv2.imread( 'C:/Users/Robert/Desktop/diploma/test-video1/osvos/rain/rain/trimaps/narrow/'+str(self.maskname)+'.png')
        #cv2.imshow('trimap je ', tri)
        #cv2.waitKey(0)
        #if cv2.countNonZero(img) == 0:
        #    if self.classifiers ==0:
        #        cv2.imwrite(str(self.root_folder)+'/osvos/DAVIS/Results/Segmentations/480p/OSVOS/'+str(directory)+'/output1/'+str(self.maskname)+'.jpg', img.astype(np.uint8))
        #        self.vypis('Object of interest is not in frame '+str(self.maskname))
        #        return
        #    else:
        #        cv2.imwrite(str(self.root_folder)+'/osvos/DAVIS/Results/Segmentations/480p/OSVOS/'+str(directory)+'/output/'+str(self.maskname)+'.jpg', img.astype(np.uint8))
        #        self.vypis('Object of interest is not in frame '+str(self.maskname))
        #        return
        kernel = np.ones((2, 2), np.uint8)
        img_erode = cv2.erode(img, kernel, iterations=2)
        img_dilate = cv2.dilate(img_erode, kernel, iterations=2)
        #cv2.waitKey()

        ###############################################
        ######## dilation /erosion for 3 map ##########

        kernel = np.ones((3, 3), np.uint8)
        sure_fg = cv2.erode(img_dilate, kernel, iterations=7)
        sure_bg = cv2.dilate(img_dilate, kernel, iterations=3)
        unknown = cv2.subtract(sure_bg, sure_fg)
        ret, thresh = cv2.threshold(unknown, 240, 255, cv2.THRESH_BINARY)
        unknown[thresh == 255] = 128 

        finaltrimap = sure_fg + unknown
        trimap = np.zeros((ob.shape[0], ob.shape[1], 3), np.uint8)
        surefg = np.zeros((sure_fg.shape[0], sure_fg.shape[1],3), np.uint8)
        white = np.ones((ob.shape[0], ob.shape[1],3), np.uint8)
        truetrimap= np.zeros((img.shape[0], img.shape[1],3))
        new = np.ones((ob.shape[0], ob.shape[1]))

        #mask = np.uint8(np.asarray(img))
        #maska = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
        frame4 = cv2.threshold(np.uint8(img),15,255,cv2.THRESH_BINARY)[1]

        
        #obr1 = cv2.cvtColor(ob, cv2.COLOR_BGR2RGB) 
        
        #im, contours, _ = cv2.findContours(frame4, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        #cnts = imutils.grab_contours(contours)
        
        #M = cv2.moments(contours[0])
        
        #self.cnts_X = int(M["m10"] / M["m00"])
        #self.cnts_Y = int(M["m01"] / M["m00"])
        #cx = int(M['m10']/M['m00'])
        #cy = int(M['m01']/M['m00'])

        #x,y,w,h = cv2.boundingRect(contours[0])
        #finaltrimap1 = ob[y:y+h,x:x+w]
        #cv2.imshow('trimap je',finaltrimap1)
        #cv2.waitKey(0)
        
        '''if w > h:
            h = w
        else:
            w = h
        if x-50 < 0:
            posun = abs(x-50)
            x = 0
            x1 = x+w+50+posun
        else:
            x = x-50
        if x+w+50 > ob.shape[1]:
            posun = abs((x+w+50)-ob.shape[1])
            x1 = ob.shape[1]
            x = x-posun
        else: 
            x1 = x+w+50
        if y-50 < 0:
            posun = abs(y-50)
            y = 0
            y1 = y+h+50+posun
        else:
            y= y-50
        if y+h+50 > ob.shape[0]:
            posun = abs((y+h+50)-ob.shape[0])
            y1 = ob.shape[0]
            y = y-posun
        else:
            y1 = y+h+50'''
        #print('x,y,x1,y1',x,y,x1,y1)
        #ca = cv2.contourArea(contours[0])
        #cv2.drawContours(ob,[contours[0]],0,(0,0,255),2)

        #cv2.rectangle(ob,(x-50,y-50),(x+w+50,y+h+50),(0,255,0),2)

        #roiimg = ob[y-50:y+h+50, x-50:x+w+50]
        #cv2.imshow('trimap', roiimg)
        #cv2.waitKey()
        y,x,h,w = int(ob.shape[0]/2), int(ob.shape[1]/2), int(ob.shape[0]), int(ob.shape[1])

        #ob1= ob[0:y, 0:x]
        #ob2= ob[0:y, x: ob.shape[1]]
        #ob3= ob[y: ob.shape[0], 0:x]
        #ob4= ob[y: ob.shape[0], x: ob.shape[1]] 

        import knn_matting
        #self.classifiers = []
        if len(self.classifiers) == 0:
            posx=0
            posy=0
            for riadok in finaltrimap:
                for pixel in riadok:
                    #print([pixel,pixel,pixel])
                    trimap[posy,posx] = pixel #([pixel,pixel,pixel])
                    posx+=1
                posx=0
                posy+=1
            #tri1= trimap[0:y, 0:x]
            #tri2= trimap[0:y, x: trimap.shape[1]]
            #tri3= trimap[y: trimap.shape[0], 0:x]
            #tri4= trimap[y: trimap.shape[0], x: trimap.shape[1]] 
            #roitrimap = trimap[y-50:y+h+50, x-50:x+w+50

            #cv2.imshow('trimap ', trimap)
            #cv2.waitKey()

            #alpha1 = knn_matting.knn_matte(ob1, tri1)
            #alpha2 = knn_matting.knn_matte(ob2, tri2)
            #alpha3 = knn_matting.knn_matte(ob3, tri3)
            #alpha4 = knn_matting.knn_matte(ob4, tri4)
            alpha = knn_matting.knn_matte(ob, trimap)

            #alpha = np.zeros((ob.shape[0],ob.shape[1]), np.float64)
            #alpha[0:y, 0:x] = alpha1 
            #alpha[0:y, x: ob.shape[1]] = alpha2 
            #alpha[y: ob.shape[0], 0:x] = alpha3 
            #alpha[y: ob.shape[0], x: ob.shape[1]]= alpha4
            
            #cv2.imshow('final image is', alpha)
            #cv2.waitKey()
            final_mask = '/final_mask/'
            #alpha = alpha.astype(float)/255
            #####################################################
            ############## show result jpeg image ###############
            overlay_color = [0, 0, 255]
            transparency = 0.6
            #plt.ion()
            #newalpha = np.ndarray((ob.shape[0], ob.shape[1]))
            #newalpha[y-50:y+h+50,x-50:x+w+50] = alpha
            if (int(self.whitebckg.get()) == 1):
                im_over = np.full(ob.shape, fill_value=[255,255,255], dtype=np.float64 )
            else:
                im_over = np.full(ob.shape, fill_value=[0,0,0], dtype=np.float64 )
            im_over[:, :, 0] =  (1-alpha) * im_over[:,:,0] + alpha * ob[:, :, 0]    # white bckgnd
            im_over[:, :, 1] =  (1-alpha) * im_over[:,:,1] + alpha * ob[:, :, 1]    # white bckgnd
            im_over[:, :, 2] =  (1-alpha) * im_over[:,:,2] + alpha * ob[:, :, 2]    # white bckgnd

            real_path = str(str(self.root_folder)+'/osvos/DAVIS/Results/Segmentations/480p/OSVOS/'+str(directory)+'/output/')
            if not os.path.exists(real_path):
                os.makedirs(real_path)
            self.vypis('picture is saved to:'+real_path)
            cv2.imwrite(str(real_path)+str(self.maskname)+'.jpg', im_over.astype(np.uint8))
            #cv2.imwrite(str(real_path)+str(self.maskname)+'trimap.jpg', trimap.astype(np.uint8))
            self.vypis('KNN Matting for '+str(self.maskname)+' frame has finished.')
        else:
            self.contour()
            #truetrimap =sure_fg
            truetrimap = np.zeros((finaltrimap.shape[0], finaltrimap.shape[1]), np.float64)
            whites = np.full(ob.shape, fill_value=[255,255,255], dtype=np.float64)
            white = np.ones((self.class_width*2,self.class_height*2,3), np.uint8)
            truetrimap = truetrimap+sure_fg
            #cv2.imshow('truetrimap je ', truetrimap)
            #cv2.imshow('sure_fg je ', sure_fg)
            #cv2.waitKey()
            pocet =0
            for i in self.classifiers:  
                alpha = knn_matting.knn_matte(i.roi, i.trimap)
                #i.showalpha(ob, alpha)
                #cv2.imshow('ob',i.roi)
                #cv2.waitKey()
                pocet+=1
                truetrimap[i.y-self.class_height:i.y+self.class_height, i.x-self.class_width:i.x+self.class_width] = alpha

            if (int(self.whitebckg.get()) == 1):
                im_over = np.full(ob.shape, fill_value=[255,255,255], dtype=np.float64 )
            else:
                im_over = np.full(ob.shape, fill_value=[0,0,0], dtype=np.float64 )

            im_over[:, :, 0] =  (1-truetrimap) * im_over[:,:,0] + truetrimap * ob[:, :, 0]    # white bckgnd
            im_over[:, :, 1] =  (1-truetrimap) * im_over[:,:,1] + truetrimap * ob[:, :, 1]    # white bckgnd
            im_over[:, :, 2] =  (1-truetrimap) * im_over[:,:,2] + truetrimap * ob[:, :, 2]    # white bckgnd    
            #print('truetrimap je ', truetrimap[10,10])
            for j in range(truetrimap.shape[0]):
                for i in range(truetrimap.shape[1]):
                    if truetrimap[j,i] == 255:
                        im_over[j,i] = ob[j,i]
            real_path = str(str(self.root_folder)+'/osvos/DAVIS/Results/Segmentations/480p/OSVOS/'+str(directory)+'/classoutput/')
            if not os.path.exists(real_path):
                os.makedirs(real_path)
            self.vypis('picture is saved to:'+real_path)
            cv2.imwrite(str(real_path)+str(self.maskname)+'.jpg', im_over)
            self.vypis('KNN Matting for '+str(self.maskname)+' frame has finished.')
        

    def class_masks(self):
        directory = os.path.basename(os.path.normpath(self.osvosfile))
        if len(str(self.osvosimageindex)) == 1:
            self.maskname = '000'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 2:
            self.maskname = '00'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 3:
            self.maskname = '0'+str(self.osvosimageindex)
        else:
            self.maskname = str(self.osvosimageindex)

        image = cv2.imread(str(self.root_folder)+'/osvos/DAVIS/JPEGImages/480p/'+str(directory)+'/'+str(self.maskname)+'.jpg')
        image1 = np.zeros((image.shape[0], image.shape[1], 3), np.uint8)
        if len(self.classifiers) > 0:
            for i in self.classifiers:
                i.showroi(image1)
            cv2image = cv2.cvtColor(image1, cv2.COLOR_BGR2RGBA)
            image2 = Image.fromarray(cv2image)
            imgtk = ImageTk.PhotoImage(image=image2)  # convert image for tkinter
            self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel2.config(image=imgtk)          

    def drawclassifiers(self):
        img = Image.open(str(self.osvosfile + '/' + str(self.maskname) + '.jpg' ))
        for cl in self.classifiers:          
            rect = ImageDraw.Draw(img)
            rect.rectangle([cl.x-self.class_width,cl.y-self.class_height,cl.x+self.class_width,cl.y+self.class_height], fill=None, outline='purple') 

        imgtk = ImageTk.PhotoImage(image=img)  # convert image for tkinter
        self.imgtk = imgtk
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
        self.panel2.config(image=imgtk)
        #self.framearray.append(imgtk)  


    def contour(self):
        self.classifiers = []
        self.class_width =20
        self.class_height = 20
        cesta =str(self.osvosfile) + '/bw_mask/'
        directory = os.path.basename(os.path.normpath(self.osvosfile))
        sys.path.append(cesta)
        if len(str(self.osvosimageindex)) == 1:
            self.maskname = '000'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 2:
            self.maskname = '00'+str(self.osvosimageindex)
        elif len(str(self.osvosimageindex)) == 3:
            self.maskname = '0'+str(self.osvosimageindex)
        else:
            self.maskname = str(self.osvosimageindex)
        #self.vypis(str(cesta)+self.maskname+'.png')
        self.vypis('rootfolder is '+str(self.root_folder))
        ob = cv2.imread(str(self.root_folder)+'/osvos/DAVIS/JPEGImages/480p/'+str(directory)+'/'+str(self.maskname)+'.jpg',cv2.IMREAD_UNCHANGED)[:,:,:3]
        img = cv2.imread( str(cesta)+str(self.maskname)+'.png',cv2.IMREAD_UNCHANGED)
        #print('hen tu je problem')
        if (len(img.shape)) == 3:
            img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY);
        im, contours, _ = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        newimg = img
        #cnts = imutils.grab_contours(contours)
        #M = cv2.moments(c[0])
        #self.cnts_X = int(M["m10"] / M["m00"])
        #self.cnts_Y = int(M["m01"] / M["m00"])
        ###############################################
        ######### delete all small patches ############
        kernel = np.ones((5, 5), np.uint8)
        img_erode = cv2.erode(newimg, kernel, iterations=2)
        #cv2.imshow('erosion of image (10,10) kernel', img_erode)
        img_dilate = cv2.dilate(img_erode, kernel, iterations=2)
        #cv2.imshow('dilation of image (10,10) kernel', img_dilate)
        #cv2.waitKey()

        ###############################################
        ######## dilation /erosion for 3 map ##########

        kernel = np.ones((3, 3), np.uint8)
        sure_fg = cv2.erode(img_dilate, kernel, iterations=3)
        #cv2.imshow('sure_fg of image (10,10) kernel', sure_fg)
        sure_bg = cv2.dilate(img_dilate, kernel, iterations=15)
        #cv2.imshow('sure_bg of image (10,10) kernel', sure_bg)
        unknown = cv2.subtract(sure_bg, sure_fg)

        ret, thresh = cv2.threshold(unknown, 240, 255, cv2.THRESH_BINARY)
        unknown[thresh == 255] = 128 
        finaltrimap = sure_fg + unknown

        #self.bay_matting()

        #################################
        ### correct part of function ####
        trimap = np.zeros((ob.shape[0], ob.shape[1], 3), np.uint8)
        posx=0
        posy=0
        for riadok in finaltrimap:
            for pixel in riadok:
                    trimap[posy,posx] = [pixel,pixel,pixel]
                    posx+=1
            posx=0
            posy+=1

        maska = np.zeros((ob.shape[0], ob.shape[1], 3), np.uint8)
        posx=0
        posy=0
        for riadok in newimg:
            for pixel in riadok:
                    maska[posy,posx] = [pixel,pixel,pixel]
                    posx+=1
            posx=0
            posy+=1
        
        posx = 0
        posy = 0
        height, width = ob.shape[0], ob.shape[1]
        image = cv2.Canny(img, height,width, 3)
        #cv2.imshow('obrazok v ktorom hladam klasifikatory ',image)
        #cv2.waitKey()

        #self.vypis('velkost ob vyska, sirka je ' + str(height) +' '+ str(width))
        #self.class_height, self.class_width = 15,15
        for riadok in iter(image):
            for pixel in riadok: 
                if pixel == 255: 
                    if len(self.classifiers) == 0:
                        if (posy-self.class_height < 0):
                            posun = abs(posy-self.class_height)
                            posy = posy + posun
                        if (posx-self.class_width < 0):
                            posun = abs(posx-self.class_width)
                            posx = posx + posun
                        if (posx+self.class_width > ob.shape[1]):
                            posun = abs((posx+self.class_width)-ob.shape[1])
                            posx = posx - posun   
                        if (posy+self.class_height > ob.shape[0]):
                            posun = abs((posy+self.class_height)-ob.shape[0])
                            posy = posy - posun                                                                
                        #self.vypis('pozicia x je ' + str(posx) + ', a y je '+str(posy))

                        #######code for finding next side
                        '''x2,y2 = 0,0
                        horizontal = None
                        for x in range(self.class_width):
                            if image[posy+self.class_width, x] ==255:
                                x2,y2 = x,posy+self.class_width
                                horizontal == True
                        if (x2 ==0) & (y2 ==0):
                            for y in range(self.class_height):
                                if image[y, posx+self.class_height] ==255:
                                    x2,y2 = posx+self.class_height,y
                                    horizontal = False
                        if (x2 ==0) & (y2 ==0):
                            for x in range(self.class_width):
                                if image[posy-self.class_height,x] ==255:
                                    x2,y2 = x,posy-self.class_width
                                    horizontal = False
                        if (x2 ==0) & (y2 ==0):
                            for y in range(self.class_height):
                                if image[y, posx-self.class_height] ==255:
                                    x2,y2 = posx-self.class_width,y
                                    horizontal = True
                        if (x2 !=0) & (y2 !=0) & (horizontal != None):
                            vacsix = int(round(self.class_width * 0.66))
                            mensix = int(round(self.class_width * 0.33))
                            vacsiy = int(round(self.class_height * 0.66))
                            mensiy = int(round(self.class_height * 0.33))
                            if horizontal ==True:                            
                                if (image[posy+1,posx] ==255): 
                                    self.clas_y1 = posy - vacsiy
                                    self.clas_x1 = posx
                                    self.class_y2 = posy + mensiy
                                    self.clas_x2 = x2
                                elif (image[posy-1,posx] == 255):
                                    self.clas_y1 =  posy - mensiy
                                    self.clas_x1 = posx
                                    self.clas_y2 = posy + vacsiy
                                    self.clas_x2 = x2
                            else:
                                if (image[posy,posx+1] ==255): 
                                    self.clas_y1 = posy 
                                    self.clas_x1 = posx - vacsix
                                    self.class_y2 = y2
                                    self.clas_x2 = posx + mensix
                                elif (image[posy,posx-1] == 255):
                                    self.clas_y1 =  posy
                                    self.clas_x1 = posx - mensix
                                    self.clas_y2 = y2
                                    self.clas_x2 = posx + vacsix
                            class_image = ob[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            class_mask = maska[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            class_trimap = trimap[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            self.classifiers.append(ClassStruct(self.clas_x1+ (round(abs(self.clas_x1-self.clas_x2)/2)),
                                                                self.clas_y1+ (round(abs(self.clas_y1-self.clas_y2)/2)), 
                                                                self.class_width, self.class_height, class_image, class_mask, 
                                                                class_trimap, self.maskname))
                        #else: '''
                        #####################################################
                        
                        class_image = ob[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                        class_mask = maska[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                        class_trimap = trimap[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                        self.classifiers.append(ClassStruct(posx,
                                                            posy, 
                                                            self.class_width, self.class_height, class_image, class_mask, 
                                                            class_trimap, self.maskname))
                    else: ## if self.classifiers in not empty 
                        self.neprekryvasa = True   
                        for cl in self.classifiers:   
                            if (abs(cl.x - posx) < (self.class_width*1)) & (abs(cl.y - posy) < (self.class_height*1)):
                                self.neprekryvasa = False
                        if self.neprekryvasa == True:
                            if (posy-self.class_height < 0):
                                posun = abs(posy-self.class_height)
                                posy = posy + posun
                            if (posx-self.class_width < 0):
                                posun = abs(posx-self.class_width)
                                posx = posx + posun
                            if (posx+self.class_width > ob.shape[1]):
                                posun = abs((posx+self.class_width)-ob.shape[1])
                                posx = posx - posun   
                            if (posy+self.class_height > ob.shape[0]):
                                posun = abs((posy+self.class_height)-ob.shape[0])
                                posy = posy - posun 
                            #self.vypis('pozicia x je ' + str(posx) + ', a y je '+str(posy))
                        #######code for finding next side
                        '''x2,y2 = 0,0
                        horizontal = None
                        for x in range(self.class_width):
                            if image[posy+self.class_width, x] ==255:
                                x2,y2 = x,posy+self.class_width
                                horizontal == True
                        if (x2 ==0) & (y2 ==0):
                            for y in range(self.class_height):
                                if image[y, posx+self.class_height] ==255:
                                    x2,y2 = posx+self.class_height,y
                                    horizontal = False
                        if (x2 ==0) & (y2 ==0):
                            for x in range(self.class_width):
                                if image[posy-self.class_height,x] ==255:
                                    x2,y2 = x,posy-self.class_width
                                    horizontal = False
                        if (x2 ==0) & (y2 ==0):
                            for y in range(self.class_height):
                                if image[y, posx-self.class_height] ==255:
                                    x2,y2 = posx-self.class_width,y
                                    horizontal = True
                        if (x2 !=0) & (y2 !=0) & (horizontal != None):
                            vacsix = int(round(self.class_width * 0.66))
                            mensix = int(round(self.class_width * 0.33))
                            vacsiy = int(round(self.class_height * 0.66))
                            mensiy = int(round(self.class_height * 0.33))
                            if horizontal ==True:                            
                                if (image[posy+1,posx] ==255): 
                                    self.clas_y1 = posy - vacsiy
                                    self.clas_x1 = posx
                                    self.class_y2 = posy + mensiy
                                    self.clas_x2 = x2
                                elif (image[posy-1,posx] == 255):
                                    self.clas_y1 =  posy - mensiy
                                    self.clas_x1 = posx
                                    self.clas_y2 = posy + vacsiy
                                    self.clas_x2 = x2
                            else:
                                if (image[posy,posx+1] ==255): 
                                    self.clas_y1 = posy 
                                    self.clas_x1 = posx - vacsix
                                    self.class_y2 = y2
                                    self.clas_x2 = posx + mensix
                                elif (image[posy,posx-1] == 255):
                                    self.clas_y1 =  posy
                                    self.clas_x1 = posx - mensix
                                    self.clas_y2 = y2
                                    self.clas_x2 = posx + vacsix
                            class_image = ob[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            class_mask = maska[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            class_trimap = trimap[self.clas_y1:self.clas_y2, self.clas_x1:self.clas_x2]
                            self.classifiers.append(ClassStruct(self.clas_x1+ (round(abs(self.clas_x1-self.clas_x2)/2)),
                                                                self.clas_y1+ (round(abs(self.clas_y1-self.clas_y2)/2)), 
                                                                self.class_width, self.class_height, class_image, class_mask, 
                                                                class_trimap, self.maskname))
                        #else:'''
                        #####################################################
                        if self.neprekryvasa == True:
                            class_image = ob[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                            class_mask = maska[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                            class_trimap = trimap[posy-self.class_height:posy+self.class_height,posx-self.class_width:posx+self.class_width]
                            self.classifiers.append(ClassStruct(posx,
                                                                posy, 
                                                                self.class_width, self.class_height, class_image, class_mask, 
                                                                class_trimap, self.maskname))    
                    #print('velkost klasifikatorov je ', len(self.classifiers))                                   
                posx+=1
            posy +=1
            posx = 0
        self.drawclassifiers()
        self.vypis('Classifiers are drawn')

        ###############################
        ###############################


    def allmasks(self):
        directory = os.path.basename(os.path.normpath(self.osvosfile))
        for image in os.listdir(self.osvosfile):
            if image == "bw_mask":
                break
            #self.contour()

            self.knn_matting()
            self.osvosimageindex+=1



    def grabcut(self):
        img = self.currimage
        #img[np.where((img < [40,40,40]).all(axis = 2))] = [0,33,166]
        #cv2.imshow('prisvetleny', img )
        #print(mask.shape[:2])
        rect = self.rectangle
        if (self.rect_or_mask == 0):
            self.mask = np.zeros(img.shape[:2],dtype = np.uint8)
            cv2.rectangle(self.mask, (rect[0],rect[1]),(rect[2],rect[3]),[255,0,0], 2)
            bgdmodel = np.zeros((1,65),np.float64)
            fgdmodel = np.zeros((1,65),np.float64)
            #print(bgdmodel, fgdmodel)
            cv2.grabCut(img,self.mask,rect,bgdmodel,fgdmodel,5,cv2.GC_INIT_WITH_RECT)
            #self.mask2 = np.where((self.mask==1)|(self.mask==3),255,0).astype("uint8")
            #img = img* self.mask2[:,:,np.newaxis]
            self.rect_or_mask = 1
            self.pRect = False
       
        elif (self.rect_or_mask == 1):         # grabcut with mask
            bgdmodel = np.zeros((1,65),np.float64)
            fgdmodel = np.zeros((1,65),np.float64)
            #print(bgdmodel, fgdmodel)
            cv2.grabCut(img,self.mask,rect,bgdmodel,fgdmodel,5,cv2.GC_INIT_WITH_MASK)

        mask2 = np.where((self.mask==0) + (self.mask==2),0,255).astype('uint8')
        ##mask2 = np.where((self.mask==0) + (self.mask==2),0,255).astype('uint8')
        img = cv2.bitwise_and(img,img, mask=mask2)
        self.maskedimage = img
        #cv2.imshow('maskedimage je ', self.maskedimage)
        image1 = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)
        image = Image.fromarray(image1)
        #image = imutils.resize(image, width=int(self.framewidth),height=int(self.frameheight))
        image = image.resize((self.framewidth,self.frameheight), Image.ANTIALIAS)
        #maska = np.where((self.mask==0) + (self.mask==2),0.5,1.0).astype('float64')
        #cv2.imshow('maska je', maska)
        #mm = np.zeros((img.shape[0], img.shape[1], img.shape[2]), np.float64)
        #mas = cv2.bitwise_and(mm,mm, mask=mask2)
        #cv2.imshow('maska je', mas)
        #pi = Image.frombytes("L", mask2.shape, mask2.tobytes())

        #pip = 
        #final = Image.new('RGBA', image.size, (255,255,255,255))    # white
        #final = Image.alpha_composite(image, pi)
        imgtk = ImageTk.PhotoImage(image=image)  # convert image for tkinter
        self.panel2.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
        self.panel2.config(image=imgtk)  # show the image
        self.root_folder = os.path.dirname(os.path.realpath(__file__))
        sys.path.append(os.path.abspath(self.root_folder))
        self.annotations = str(str(self.root_folder) + '/osvos/DAVIS/Annotations/480p/' + str(self.newFolder)+'/')
        if (len(str(self.index)) == 1):
            self.maskedindex = "000"+ str(self.index)
        elif (len(str(self.index)) ==2):
            self.maskedindex = "00"+ str(self.index)
        elif (len(str(self.index)) ==3):
            self.maskedindex = "0"+ str(self.index)
        elif (len(str(self.index)) ==4):
            self.maskedindex =  str(self.index)
        else:
            self.vypis("video is too long")
            return
        if not os.path.exists( self.annotations ):
            os.makedirs( self.annotations )
        self.mask3 = np.where((self.mask==0) + (self.mask==2), 0,255 ).astype('uint8')
        self.mask3 = imutils.resize(self.mask3, width=int(self.framewidth),height=int(self.frameheight))
        maska = Image.fromarray(self.mask3)
        cv2.imwrite(os.path.join(self.annotations + self.maskedindex + '.png'), self.mask3)
        self.vypis('Grabcut has finished!') 

    def stop(self):
        self.stopped = False
        self.Button3.configure(state="normal")
        self.Button2.configure(state="normal")
        self.Button4.configure(state="disabled")
        self.Button5.configure(state="normal")
        self.Button6.configure(state="normal")
        self.Button7.configure(state="normal")
        self.pRect = True; 
        self.rectangle = False; 
        self.rect_or_mask = 0 
        #self.vypis("stopol si na frame" + str(self.index) + "zapametaj si to ak budes robit Grabcut aby si vedel ku ktoremu framu si spravil masku" )
        ##self.vs = self.loadstream  
        # KONTROLA CI MAM NACITANE CELE VIDEO V POLI OBRAZKOV
        ##print('Button4 - clicked')
        ##print('obrazky v poli su')
        ##for i in range(len(self.stream)):
        ##   print(i, self.stream[i])

    def dragvideo(self, event):
        self.sliderdrag = True
        self.vypis("klikanie funguje")
        self.video_loop()
        self.sliderdrag = False

    def decode_fourcc(self,v):
        v = int(v)
        return "".join([chr((v >> 8 * i) & 0xFF) for i in range(4)])

    def load(self):
        self.loadvideo = True
        self.loadosvosfiles = False
        self.file = filedialog.askopenfilename()
        self.filename =  os.path.basename(os.path.realpath(self.file))
        self.newFolder, videotype = self.filename.split('.')
        self.file_path = dir_path = os.path.dirname(os.path.realpath(self.file))
        self.vs = cv2.VideoCapture(self.file)
        self.nFrames = int(  self.vs.get(cv2.CAP_PROP_FRAME_COUNT ) )
        self.fps = self.vs.get(cv2.CAP_PROP_FPS )
        self.waitPerFrameInMillisec = float( self.fps / 1000 )
        self.framewidth = int(self.vs.get(cv2.CAP_PROP_FRAME_WIDTH))
        self.frameheight= int(self.vs.get(cv2.CAP_PROP_FRAME_HEIGHT))
        


        # codec = 0x47504A4D # MJPG
        codec = 844715353.0 # YUY2
        self.vs.set(cv2.CAP_PROP_FOURCC, codec)
        self.fourcc = self.vs.get(cv2.CAP_PROP_FOURCC)
        self.codec = self.decode_fourcc(self.fourcc)

        writer = cv2.VideoWriter;

        #print('Frames,FPS, WAITFOR',self.nFrames, self.fps, self.waitPerFrameInMillisec)
        self.vypis('Frames, FPS, WAITFOR ' + str(self.nFrames) + ', ' + str(self.fps) + ', ' + str(self.waitPerFrameInMillisec))
        self.scale.configure(to=""+str(self.nFrames))
        ######################################################################
        #print('width and height', self.framewidth, self.frameheight)
        self.vypis("width and height: " +  str(self.framewidth) + ", " + str(self.frameheight))
        bigger = max(self.framewidth, self.frameheight)
        oneper = bigger/100
        self.percent = float(800/oneper)
        #print('percenta',self.percent)
        self.vypis('Cropped at percent:' + str(self.percent))
        self.framewidth = int((self.framewidth/100)*self.percent)
        self.frameheight= int((self.frameheight/100)*self.percent)
        #print('newwidth and newheight', self.framewidth, self.frameheight)
        self.vypis('new video width and height: ' + str(self.framewidth) + ", " + str(self.frameheight))
        self.vypis('video codec  is: ' + str(self.codec))
        self.Button3.configure(state="normal")

        ################################################################################
        '''IF loaded video already have mask and images generated in osvos folders, this part of code setup all the neccesary paths, variabes.'''
        ################################################################################
        print('path to the mask is:', os.path.join(str(self.file_path) + '/OSVOS','DAVIS','ANNOTATIONS', '480P', self.newFolder))
        #print('cesta k obrazkom by mala byt',os.path.join(str(self.file_path) +'/OSVOS','DAVIS','JPEGImages', '480P', self.newFolder))
        '''IF loaded video already have mask and images generated in osvos folders, this part of code setup all the neccesary paths, variabes.'''
        cesta = str(str(self.file_path)+ '/OSVOS/DAVIS/ANNOTATIONS/480P/'+ str(self.newFolder)+'/')
        if os.path.isdir(str(self.file_path)+ '/OSVOS/DAVIS/ANNOTATIONS/480P/'+ str(self.newFolder)+'/'):
        #    print('Path exist', cesta)
        #    if os.path.isdir(cesta):
        #if os.path.getsize(str(self.file_path)+ '/OSVOS/DAVIS/ANNOTATIONS/480P/'+ str(self.newFolder)) > 0:
                import glob 
                #for obr in os.listdir(os.path.join(str(self.file_path) + '/OSVOS','DAVIS','ANNOTATIONS', '480P', self.newFolder, '/')):
                files_path = [os.path.abspath(x) for x in os.listdir(str(os.path.join(str(self.file_path) + '/OSVOS','DAVIS','ANNOTATIONS', '480P', self.newFolder, '/')))]
                #for f in glob.glob(os.path.join(str(self.file_path) + '/OSVOS','DAVIS','ANNOTATIONS', '480P', self.newFolder, '/')):
                #for f in files_path:
                #    self.maskedindex= f
                #    print('maskedindex is ', self.maskedindex)
                self.vypis('this video already have mask and images in osvos folders')

        '''load first frame of video or loading of picture'''
        self.stream = [self.nFrames]  
        index = 0
        self.loadstream = self.vs
        self.numberofimage = 0
        ok, frame = self.loadstream.read()  # read frame from video stream
        if ok:  # frame captured without any errors
            uloz = frame
            frame = imutils.resize(frame, width=self.framewidth, height=self.frameheight)
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)  # convert colors from BGR to RGBA
            self.currimage = frame
            self.current_image = Image.fromarray(cv2image)  # convert image for PIL
            self.current = self.current_image
            self.stream[index] = uloz
            #self.current_image= self.current_image.resize([self.framewidth,self.frameheight],PIL.Image.ANTIALIAS)           
            imgtk = ImageTk.PhotoImage(image=self.current_image)  # convert image for tkinter
            self.imgtk = imgtk
            self.panel.imgtk = imgtk  # anchor imgtk so it does not be deleted by garbage-collector  
            self.panel.config(image=imgtk)  # show the image
            index +=1
        self.loadstream = self.vs      
        self.NumberFrames = 1
        self.index = 0

    def setupdesign(self, top=None):
            _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
            _fgcolor = '#000000'  # X11 color: 'black'
            _compcolor = '#d9d9d9' # X11 color: 'gray85'
            _ana1color = '#d9d9d9' # X11 color: 'gray85' 
            _ana2color = '#d9d9d9' # X11 color: 'gray85' 
            self.top=top
            self.step = False
            self.stepback = False
            self.sliderdrag = False
            self.zoomvalue = 1.0
            self.maskedindex = ""

            self.loadvideo = False
            self.loadosvosfiles = False
            #self.G = grabcut_main.Grabcut(self)
            self.top.geometry("1680x790+376+61")
            self.top.title("Video Object Segmentation")
            self.top.configure(background="light slate gray")
            self.top.configure(highlightbackground="#d9d9d9")
            self.top.configure(highlightcolor="black")
            self.root_folder = os.path.dirname(os.path.realpath(__file__))


            self.Canvas1 = Canvas(top)
            self.Canvas1.place(relx=0.005, rely=0.77, relheight=0.24, relwidth=0.99)
            self.Canvas1.configure(background="dark slate gray")
            self.Canvas1.configure(borderwidth="1")
            self.Canvas1.configure(highlightbackground="black")
            self.Canvas1.configure(highlightcolor="black")
            self.Canvas1.configure(insertbackground="black")
            self.Canvas1.configure(relief=RIDGE)
            self.Canvas1.configure(selectbackground="yellow") #(selectbackground="#c4c4c4")
            self.Canvas1.configure(selectforeground="black")

            self.Canvas2 = Canvas(self.Canvas1)
            self.Canvas2.place(relx=0.48, rely=0.04, relheight=0.92, relwidth=0.50)
            self.Canvas2.configure(background="dark slate gray")
            self.Canvas2.configure(borderwidth="1")
            self.Canvas2.configure(highlightbackground="black")
            self.Canvas2.configure(highlightcolor="black")
            self.Canvas2.configure(insertbackground="black")
            self.Canvas2.configure(relief=RIDGE)
            self.Canvas2.configure(selectbackground="yellow") #(selectbackground="#c4c4c4")
            self.Canvas2.configure(selectforeground="black")
            #self.Canvas1.configure(width=681)

            self.panel = Label(top)  # initialize image panel
            self.panel.configure(background="black")
            self.panel.place(relx=0.01, rely=0.04, height=500, width=800)
            self.panel.bind("<ButtonPress-1>", self.on_button_press)
            self.panel.bind("<B1-Motion>", self.on_button_move)
            self.panel.bind("<ButtonRelease-1>", self.on_button_release)
            self.panel.bind("<ButtonPress-3>", self.translate)
            self.panel.bind("<B3-Motion>", self.move_pic)
            self.panel.bind("<ButtonRelease-3>", self.draw_moved_pic)

            self.panel2 = Label(top)  # initialize image panel
            self.panel2.configure(background="black")
            self.panel2.place(relx=0.51, rely=0.04, height=500, width=800)
            self.panel2.bind("<ButtonPress-1>", self.on_button_press)
            self.panel2.bind("<B1-Motion>", self.on_button_move1)
            self.panel2.bind("<ButtonRelease-1>", self.on_button_release1)
            self.panel2.bind("<ButtonPress-3>", self.translate)
            #self.panel2.bind("<B3-Motion>", self.move_pic)
            self.panel2.bind("<ButtonRelease-3>", self.draw_moved_pic)


            self.name_of_win1 =Label(top, text="Grabcut & OSVOS", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.name_of_win1.place(relx=0.185, rely=0.003, height=30, width=200)

            self.name_of_win2 =Label(top, text="Fine Tuning & KNN Matte", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.name_of_win2.place(relx=0.685, rely=0.003, height=30, width=200)

            self.labelOSVOS=Label(top, text="|--   Grabcut & OSVOS   --|", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.labelOSVOS.place(relx=0.01, rely=0.78, height=30, width=200)

            self.lblmidd1=Label(top, text="|                                     |", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.lblmidd1.place(relx=0.01, rely=0.87, height=30, width=200)


            self.lblend1=Label(top, text="|--                                 --|", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.lblend1.place(relx=0.01, rely=0.96, height=30, width=200)

            self.labelFINETUNE=Label(top, text="|--             Alpha matte & Finetune             --|", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.labelFINETUNE.place(relx=0.20, rely=0.78, height=30, width=350)

            self.lblmidd2=Label(top, text="|                                                               |", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.lblmidd2.place(relx=0.20, rely=0.87, height=30, width=350)


            self.lblend2=Label(top, text="|--                                                           --|", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.lblend2.place(relx=0.20, rely=0.96, height=30, width=350)

            self.os_iter = IntVar()
            self.os_iter.set(100)
            self.osvos_iter = Entry(top, textvariable= self.os_iter, fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.osvos_iter.place(relx=0.02, rely=0.94, height=20, width=40)

            self.os_iteration=Label(top, text="Iterations", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.os_iteration.place(relx=0.01, rely=0.91, height=20, width=100)


            self.videoFPS = IntVar()
            self.videoFPS.set(24)
            self.osvos_iter1 = Entry(top, textvariable= self.videoFPS, fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.osvos_iter1.place(relx=0.25, rely=0.93, height=20, width=40)
            #e.delete(0, END)

            self.dilatenum = IntVar()
            self.dilatenum.set(5)
            self.dilatenum1 = Entry(top, textvariable= self.dilatenum, fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.dilatenum1.place(relx=0.31, rely=0.93, height=20, width=40)

            self.erodenum = IntVar()
            self.erodenum.set(5)
            self.erodenum1 = Entry(top, textvariable= self.erodenum, fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.erodenum1.place(relx=0.375, rely=0.93, height=20, width=40)

            self.kernel = IntVar()
            self.kernel.set(5)
            self.kernel1 = Entry(top, textvariable= self.kernel, fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.kernel1.place(relx=0.375, rely=0.96, height=20, width=40)

            self.whitebckg = IntVar()
            #self.whitebckg = 1
            self.whitebckg1 = Radiobutton(self.top,  variable=self.whitebckg, value=1)
            self.whitebckg1.place(relx=0.28, rely=0.96, height=20, width=80)
            self.whitebckg1.configure(activebackground="light slate gray")
            self.whitebckg1.configure(background="light slate gray")
            self.whitebckg1.configure(activeforeground='black')
            self.whitebckg1.configure(pady="0")
            self.whitebckg1.configure(state="normal")
            self.whitebckg1.configure(text="white bg", foreground='black')


            self.blackbckg1 = Radiobutton(self.top, variable=self.whitebckg, value=2)
            self.blackbckg1.place(relx=0.22, rely=0.96, height=20, width=80)
            self.blackbckg1.configure(activebackground="light slate gray")
            self.blackbckg1.configure(background="light slate gray")
            self.blackbckg1.configure(activeforeground='black')
            self.blackbckg1.configure(pady="0")
            self.blackbckg1.configure(state="normal")
            self.blackbckg1.configure(text="black bg", foreground='black')



            self.exportFPS=Label(top, text="FPS", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.exportFPS.place(relx=0.22, rely=0.93, height=20, width=40)

            self.setdilate=Label(top, text="Dilate", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.setdilate.place(relx=0.28, rely=0.93, height=20, width=50)

            self.seterode=Label(top, text="Erode", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.seterode.place(relx=0.34, rely=0.93, height=20, width=50)

            self.seterode=Label(top, text="Kernel", fg='white', bg="dark slate gray", font=("Helvetica", 10))
            self.seterode.place(relx=0.34, rely=0.96, height=20, width=50)


            self.Button1 = Button(top, command=self.load)
            self.Button1.place(relx=0.02, rely=0.82, height=33, width=78)
            self.Button1.configure(activebackground="light slate gray")
            self.Button1.configure(activeforeground="#000000")
            self.Button1.configure(background="black")
            self.Button1.configure(disabledforeground="#a3a3a3")
            self.Button1.configure(foreground="#000000")
            self.Button1.configure(highlightbackground="#d9d9d9")
            self.Button1.configure(highlightcolor="white")
            self.Button1.configure(pady="0")
            self.Button1.configure(text='''Load video''', foreground='white')
            #self.Button1.bind('<Button-1>',self.load)
        
            self.Button2 = Button(top, command=self.grabcut)
            self.Button2.place(relx=0.07, rely=0.94, height=33, width=78)
            self.Button2.configure(activebackground="light slate gray")
            self.Button2.configure(activeforeground="#000000")
            self.Button2.configure(background="black")
            self.Button2.configure(disabledforeground="#a3a3a3")
            self.Button2.configure(foreground="#000000")
            self.Button2.configure(highlightbackground="#d9d9d9")
            self.Button2.configure(highlightcolor="black")
            self.Button2.configure(pady="0")
            self.Button2.configure(state="disabled")
            self.Button2.configure(text='''GrabCUT''', foreground='white')
            #self.Button2.bind('<Button-2>')

            self.Button5 = Button(top, command=self.fground)
            self.Button5.place(relx=0.07, rely=0.86, height=30, width=83)
            self.Button5.configure(activebackground="light slate gray")
            self.Button5.configure(activeforeground="#000000")
            self.Button5.configure(background="black")
            self.Button5.configure(disabledforeground="#a3a3a3")
            self.Button5.configure(foreground="#000000")
            self.Button5.configure(highlightbackground="#d9d9d9")
            self.Button5.configure(highlightcolor="black")
            self.Button5.configure(pady="0")
            self.Button5.configure(state="disabled")
            self.Button5.configure(text='''foreground''', foreground='white')

            self.Button6 = Button(top, command=self.bground)
            self.Button6.place(relx=0.07, rely=0.90, height=30, width=83)
            self.Button6.configure(activebackground="light slate gray")
            self.Button6.configure(activeforeground="#000000")
            self.Button6.configure(background="black")
            self.Button6.configure(disabledforeground="#a3a3a3")
            self.Button6.configure(foreground="#000000")
            self.Button6.configure(highlightbackground="#d9d9d9")
            self.Button6.configure(highlightcolor="black")
            self.Button6.configure(pady="0")
            self.Button6.configure(state="disabled")
            self.Button6.configure(text='''background''', foreground='white')

            self.Button15 = Button(top, command=self.zoomin)
            self.Button15.place(relx=0.07, rely=0.82, height=24, width=43)
            self.Button15.configure(activebackground="light slate gray")
            self.Button15.configure(activeforeground="#000000")
            self.Button15.configure(background="black")
            self.Button15.configure(disabledforeground="#a3a3a3")
            self.Button15.configure(foreground="#000000")
            self.Button15.configure(highlightbackground="#d9d9d9")
            self.Button15.configure(highlightcolor="black")
            self.Button15.configure(pady="0")
            self.Button15.configure(state="disabled")
            self.Button15.configure(text='''+''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button16 = Button(top, command=self.zoomout)
            self.Button16.place(relx=0.095, rely=0.82, height=24, width=43)
            self.Button16.configure(activebackground="light slate gray")
            self.Button16.configure(activeforeground="#000000")
            self.Button16.configure(background="black")
            self.Button16.configure(disabledforeground="#a3a3a3")
            self.Button16.configure(foreground="#000000")
            self.Button16.configure(highlightbackground="#d9d9d9")
            self.Button16.configure(highlightcolor="black")
            self.Button16.configure(pady="0")
            self.Button16.configure(state="disabled")
            self.Button16.configure(text='''-''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button7 = Button(top, command=self.start_osvos)
            self.Button7.place(relx=0.02, rely=0.87, height=33, width=78)
            self.Button7.configure(activebackground="light slate gray")
            self.Button7.configure(activeforeground="#000000")
            self.Button7.configure(background="black")
            self.Button7.configure(disabledforeground="#a3a3a3")
            self.Button7.configure(foreground="#000000")
            self.Button7.configure(highlightbackground="#d9d9d9")
            self.Button7.configure(highlightcolor="black")
            self.Button7.configure(pady="0")
            self.Button7.configure(state="disabled")
            self.Button7.configure(text='''OSVOS''', foreground='white') 

            '''
            self.Button8 = Button(top, command=self.saveto)
            self.Button8.place(relx=0.02, rely=0.87, height=33, width=78)
            self.Button8.configure(activebackground="light slate gray")
            self.Button8.configure(activeforeground="#000000")
            self.Button8.configure(background="black")
            self.Button8.configure(disabledforeground="#a3a3a3")
            self.Button8.configure(foreground="#000000")
            self.Button8.configure(highlightbackground="#d9d9d9")
            self.Button8.configure(highlightcolor="white")
            self.Button8.configure(pady="0")
            self.Button8.configure(text='Save pics', foreground='white')
            '''

            #################### left window video player funcs. ######################

            self.Button3 = Button(top, command=self.start)
            self.Button3.place(relx=0.20, rely=0.71, height=43, width=53)
            self.Button3.configure(activebackground="light slate gray")
            self.Button3.configure(activeforeground="#000000")
            self.Button3.configure(background="black")
            self.Button3.configure(disabledforeground="#a3a3a3")
            self.Button3.configure(foreground="#000000")
            self.Button3.configure(highlightbackground="#d9d9d9")
            self.Button3.configure(highlightcolor="black")
            self.Button3.configure(pady="0")
            self.Button3.configure(state="disabled")
            self.Button3.configure(text='''|>''', foreground='white')
            #self.Button3.bind('<Button-3>',self.start)

            self.Button4 = Button(top, command=self.stop)
            self.Button4.place(relx=0.23, rely=0.71, height=43, width=53)
            self.Button4.configure(activebackground="light slate gray")
            self.Button4.configure(activeforeground="#000000")
            self.Button4.configure(background="black")
            self.Button4.configure(disabledforeground="#a3a3a3")
            self.Button4.configure(foreground="#000000")
            self.Button4.configure(highlightbackground="#d9d9d9")
            self.Button4.configure(highlightcolor="black")
            self.Button4.configure(pady="0")
            self.Button4.configure(state="disabled")
            self.Button4.configure(text='''||''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button9 = Button(top, command=self.stepforward)
            self.Button9.place(relx=0.26, rely=0.71, height=43, width=53)
            self.Button9.configure(activebackground="light slate gray")
            self.Button9.configure(activeforeground="#000000")
            self.Button9.configure(background="black")
            self.Button9.configure(disabledforeground="#a3a3a3")
            self.Button9.configure(foreground="#000000")
            self.Button9.configure(highlightbackground="#d9d9d9")
            self.Button9.configure(highlightcolor="black")
            self.Button9.configure(pady="0")
            self.Button9.configure(state="disabled")
            self.Button9.configure(text='''>>''', foreground='white')

            self.Button10 = Button(top, command=self.stepbackward)
            self.Button10.place(relx=0.17, rely=0.71, height=43, width=53)
            self.Button10.configure(activebackground="light slate gray")
            self.Button10.configure(activeforeground="#000000")
            self.Button10.configure(background="black")
            self.Button10.configure(disabledforeground="#a3a3a3")
            self.Button10.configure(foreground="#000000")
            self.Button10.configure(highlightbackground="#d9d9d9")
            self.Button10.configure(highlightcolor="black")
            self.Button10.configure(pady="0")
            self.Button10.configure(state="disabled")
            self.Button10.configure(text='''<<''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.var = DoubleVar()
            self.scale = Scale( self.top, variable = self.var, orient=HORIZONTAL, showvalue=0, bg="black", highlightbackground="black", from_="0", to="312")
            self.scale.place(relx=0.01, rely=0.68, height=25, width=800)
            self.scale.bind("<B1-Motion>", self.dragvideo)

            #################### right window video player funcs. ######################

            # self.Button11 = Button(top, command=self.start)
            # self.Button11.place(relx=0.72, rely=0.71, height=43, width=53)
            # self.Button11.configure(activebackground="light slate gray")
            # self.Button11.configure(activeforeground="#000000")
            # self.Button11.configure(background="black")
            # self.Button11.configure(disabledforeground="#a3a3a3")
            # self.Button11.configure(foreground="#000000")
            # self.Button11.configure(highlightbackground="#d9d9d9")
            # self.Button11.configure(highlightcolor="black")
            # self.Button11.configure(pady="0")
            # self.Button11.configure(state="disabled")
            # self.Button11.configure(text='''|>''', foreground='white')
            # #self.Button3.bind('<Button-3>',self.start)

            self.Button12 = Button(top, command=self.export)
            self.Button12.place(relx=0.22, rely=0.87, height=43, width=90)
            self.Button12.configure(activebackground="light slate gray")
            self.Button12.configure(activeforeground="#000000")
            self.Button12.configure(background="black")
            self.Button12.configure(disabledforeground="#a3a3a3")
            self.Button12.configure(foreground="#000000")
            self.Button12.configure(highlightbackground="#d9d9d9")
            self.Button12.configure(highlightcolor="black")
            self.Button12.configure(pady="0")
            self.Button12.configure(state="disabled")
            self.Button12.configure(text='''Export \nas mp4''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button13 = Button(top, command=self.stepforwardright)
            self.Button13.place(relx=0.75, rely=0.71, height=43, width=53)
            self.Button13.configure(activebackground="light slate gray")
            self.Button13.configure(activeforeground="#000000")
            self.Button13.configure(background="black")
            self.Button13.configure(disabledforeground="#a3a3a3")
            self.Button13.configure(foreground="#000000")
            self.Button13.configure(highlightbackground="#d9d9d9")
            self.Button13.configure(highlightcolor="black")
            self.Button13.configure(pady="0")
            self.Button13.configure(state="disabled")
            self.Button13.configure(text='''>>''', foreground='white')

            self.Button14 = Button(top, command=self.stepbackwardright)
            self.Button14.place(relx=0.72, rely=0.71, height=43, width=53)
            self.Button14.configure(activebackground="light slate gray")
            self.Button14.configure(activeforeground="#000000")
            self.Button14.configure(background="black")
            self.Button14.configure(disabledforeground="#a3a3a3")
            self.Button14.configure(foreground="#000000")
            self.Button14.configure(highlightbackground="#d9d9d9")
            self.Button14.configure(highlightcolor="black")
            self.Button14.configure(pady="0")
            self.Button14.configure(state="disabled")
            self.Button14.configure(text='''<<''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button17 = Button(top, command=self.loadosvos)
            self.Button17.place(relx=0.22, rely=0.82, height=33, width=90)
            self.Button17.configure(activebackground="light slate gray")
            self.Button17.configure(activeforeground="#000000")
            self.Button17.configure(background="black")
            self.Button17.configure(disabledforeground="#a3a3a3")
            self.Button17.configure(foreground="#000000")
            self.Button17.configure(highlightbackground="#d9d9d9")
            self.Button17.configure(highlightcolor="black")
            self.Button17.configure(pady="0")
            self.Button17.configure(state="normal")
            self.Button17.configure(text='''Load Osvos''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button18 = Button(top, command=self.contour, font=("Helvetica", 9))
            self.Button18.place(relx=0.34, rely=0.82, height=33, width=90)
            self.Button18.configure(activebackground="light slate gray")
            self.Button18.configure(activeforeground="#000000")
            self.Button18.configure(background="black")
            self.Button18.configure(disabledforeground="#a3a3a3")
            self.Button18.configure(foreground="#000000")
            self.Button18.configure(highlightbackground="#d9d9d9")
            self.Button18.configure(highlightcolor="black")
            self.Button18.configure(pady="0")
            self.Button18.configure(state="normal")
            self.Button18.configure(text='''Compute \nClassifiers''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button19 = Button(top, command=self.knn_matting)
            self.Button19.place(relx=0.28, rely=0.82, height=33, width=90)
            self.Button19.configure(activebackground="light slate gray")
            self.Button19.configure(activeforeground="#000000")
            self.Button19.configure(background="black")
            self.Button19.configure(disabledforeground="#a3a3a3")
            self.Button19.configure(foreground="#000000")
            self.Button19.configure(highlightbackground="#d9d9d9")
            self.Button19.configure(highlightcolor="black")
            self.Button19.configure(pady="0")
            self.Button19.configure(state="normal")
            self.Button19.configure(text='''KNN Matte''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button20 = Button(top, command=self.class_masks)
            self.Button20.place(relx=0.34, rely=0.87, height=45, width=90)
            self.Button20.configure(activebackground="light slate gray")
            self.Button20.configure(activeforeground="#000000")
            self.Button20.configure(background="black")
            self.Button20.configure(disabledforeground="#a3a3a3")
            self.Button20.configure(foreground="#000000")
            self.Button20.configure(highlightbackground="#d9d9d9")
            self.Button20.configure(highlightcolor="black")
            self.Button20.configure(pady="0")
            self.Button20.configure(state="normal")
            self.Button20.configure(text='''Classifiers \nMasks''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)


            # self.Button21 = Button(top, command= optflow )
            # self.Button21.place(relx=0.28, rely=0.92, height=33, width=90)
            # self.Button21.configure(activebackground="light slate gray")
            # self.Button21.configure(activeforeground="#000000")
            # self.Button21.configure(background="black")
            # self.Button21.configure(disabledforeground="#a3a3a3")
            # self.Button21.configure(foreground="#000000")
            # self.Button21.configure(highlightbackground="#d9d9d9")
            # self.Button21.configure(highlightcolor="black")
            # self.Button21.configure(pady="0")
            # self.Button21.configure(state="normal")
            # self.Button21.configure(text='''optflow''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.Button22 = Button(top, command= self.allmasks )
            self.Button22.place(relx=0.28, rely=0.87, height=45, width=90)
            self.Button22.configure(activebackground="light slate gray")
            self.Button22.configure(activeforeground="#000000")
            self.Button22.configure(background="black")
            self.Button22.configure(disabledforeground="#a3a3a3")
            self.Button22.configure(foreground="#000000")
            self.Button22.configure(highlightbackground="#d9d9d9")
            self.Button22.configure(highlightcolor="black")
            self.Button22.configure(pady="0")
            self.Button22.configure(state="normal")
            self.Button22.configure(text='''Compute All\n frames ''', foreground='white')
            #self.Button4.bind('<Button-4>',self.stop)

            self.osvosframes = IntVar()
            self.osvosframes = 1
            self.checkbutton1 = Radiobutton(self.top, value=1, variable=self.osvosframes, command= self.changeimage)
            self.checkbutton1.place(relx=0.52, rely=0.715, height=18, width=120)
            self.checkbutton1.configure(activebackground="light slate gray")
            self.checkbutton1.configure(background="light slate gray")
            self.checkbutton1.configure(activeforeground='black')
            #self.checkbutton1.configure(background="black")
            #self.checkbutton1.configure(disabledforeground="#a3a3a3")
            #self.checkbutton1.configure(foreground="#000000")
            #self.checkbutton1.configure(highlightcolor="black")
            self.checkbutton1.configure(pady="0")
            self.checkbutton1.configure(state="normal")
            self.checkbutton1.configure(text="osvos frames", foreground='black')

            self.checkbutton2 = Radiobutton(self.top, value=2, variable=self.osvosframes, command= self.changeimage)
            self.checkbutton2.place(relx=0.52, rely=0.735, height=18, width=120)
            self.checkbutton2.configure(activebackground="light slate gray")
            self.checkbutton2.configure(background="light slate gray")
            self.checkbutton2.configure(activeforeground='black')
            #self.checkbutton2.configure(background="black")
            #self.checkbutton2.configure(disabledforeground="#a3a3a3")
            #self.checkbutton2.configure(foreground="#000000")
            #self.checkbutton2.configure(highlightcolor="black")
            self.checkbutton2.configure(pady="0")
            self.checkbutton2.configure(state="normal")
            self.checkbutton2.configure(text="show mask", foreground='black')

            self.checkbutton3 = Radiobutton(self.top, value=3, variable=self.osvosframes, command= self.changeimage)
            self.checkbutton3.place(relx=0.59, rely=0.7225, height=18, width=120)
            self.checkbutton3.configure(activebackground="light slate gray")
            self.checkbutton3.configure(background="light slate gray")
            self.checkbutton3.configure(activeforeground='black')
            #self.checkbutton3.configure(background="black")
            #self.checkbutton3.configure(disabledforeground="#a3a3a3")
            #self.checkbutton3.configure(foreground="#000000")
            #self.checkbutton3.configure(highlightcolor="black")
            self.checkbutton3.configure(pady="0")
            self.checkbutton3.configure(state="normal")
            self.checkbutton3.configure(text="show trimap", foreground='black')


            self.var1 = DoubleVar()
            #self.var1 = 1
            self.scale1 = Scale( self.top, variable = self.var1, orient=HORIZONTAL, showvalue=0, bg="black", highlightbackground="black", from_="0", to="100")
            self.scale1.place(relx=0.51, rely=0.68, height=25, width=800)



            S = Scrollbar(self.Canvas2)
            self.textwindow = Text(self.Canvas2, bg='black', fg='white')
            self.textwindow.place(relx=0.18, rely=0.50, height=100, width=250)
            S.pack(side=RIGHT, fill=Y)
            self.quote = """"""
            self.textwindow.insert(END, self.quote)
            self.textwindow.pack(side=LEFT, fill=Y)
            
            mainloop( )




